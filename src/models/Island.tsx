/* eslint-disable @typescript-eslint/no-explicit-any */
/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: nimzu (https://sketchfab.com/nimzuk)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/foxs-islands-163b68e09fcc47618450150be7785907
Title: Fox's islands
*/

import React, { useRef, useEffect } from "react";
import { useGLTF } from "@react-three/drei";
import { useFrame, useThree } from "@react-three/fiber";
import islandScene from '../assets/3d/island.glb'
import {a} from '@react-spring/three'
import { MeshStandardMaterial } from 'three';


interface Node {
    geometry: any;
    // Define properties of a node
    // For example, you might have a name and a position
    name: string;
    position: [number, number, number];
    // Add other properties as needed
  }
  
  interface Material {
    // Define properties of a material
    // For example, you might have color and texture properties
    color: string;
    texture: string;
    // Add other properties as needed
  }
  
  interface GLTFResult {
    nodes: Record<string, Node>;
    materials: Record<string, Material> | any;
  }  

const Island = ({isRotating, setIsRotating ,setCurrentStage , ...props}) => {
    const islandRef = useRef();
    const {gl, viewport} = useThree();


  const { nodes, materials } = useGLTF(islandScene) as GLTFResult|any;
  const lastX = useRef(0);
  const rotationSpeed = useRef(0)
  const dampingFactor = 0.95
  
  const handlePointerDown = (e:any) => {
    e.stopPropagation();
    e.preventDefault();
     setIsRotating(true)
   
     const clientX = e.touches ? e.touches[0].clientX : e.clientX ;
     lastX.current = clientX;
  }

 
  const handlePointerUp = (e:any) => {
    e.stopPropagation();
    e.preventDefault();
    setIsRotating(false)
  
  }

  const handlePointerMove = (e:any) => {
    e.stopPropagation();
    e.preventDefault();
    if (isRotating) {
      // If rotation is enabled, calculate the change in clientX position
      const clientX = e.touches ? e.touches[0].clientX : e.clientX;

      // calculate the change in the horizontal position of the mouse cursor or touch input,
      // relative to the viewport's width
      const delta = (clientX - lastX.current) / viewport.width;

      // Update the island's rotation based on the mouse/touch movement
      islandRef.current.rotation.y += delta * 0.01 * Math.PI;

      // Update the reference for the last clientX position
      lastX.current = clientX;

      // Update the rotation speed
      rotationSpeed.current = delta * 0.01 * Math.PI;
    }
  }
  // Handle keydown events
  const handleKeyDown = (event) => {
    if (event.key === "ArrowLeft") {
      if (!isRotating) setIsRotating(true);

      islandRef.current.rotation.y += 0.01 * Math.PI;
      rotationSpeed.current = 0.007;
    } else if (event.key === "ArrowRight") {
      if (!isRotating) setIsRotating(true);

      islandRef.current.rotation.y -= 0.01 * Math.PI;
      rotationSpeed.current = -0.007;
    }
  };

  // Handle keyup events
  const handleKeyUp = (event) => {
    if (event.key === "ArrowLeft" || event.key === "ArrowRight") {
      setIsRotating(false);
    }
  };

  useEffect(() => {
    // Add event listeners for pointer and keyboard events
    const canvas = gl.domElement;
    canvas.addEventListener("pointerdown", handlePointerDown);
    canvas.addEventListener("pointerup", handlePointerUp);
    canvas.addEventListener("pointermove", handlePointerMove);
    window.addEventListener("keydown", handleKeyDown);
    window.addEventListener("keyup", handleKeyUp);


    // Remove event listeners when component unmounts
    return () => {
      canvas.removeEventListener("pointerdown", handlePointerDown);
      canvas.removeEventListener("pointerup", handlePointerUp);
      canvas.removeEventListener("pointermove", handlePointerMove);
      window.addEventListener("keydown", handleKeyDown);
      window.addEventListener("keyup", handleKeyUp);

    };
  }, [gl, handlePointerDown, handlePointerUp, handlePointerMove]);
 
  // This function is called on each frame update
  useFrame(() => {
    // If not rotating, apply damping to slow down the rotation (smoothly)
    if (!isRotating) {
      // Apply damping factor
      rotationSpeed.current *= dampingFactor;

      // Stop rotation when speed is very small
      if (Math.abs(rotationSpeed.current) < 0.001) {
        rotationSpeed.current = 0;
      }

      islandRef.current.rotation.y += rotationSpeed.current;
    } else {
      // When rotating, determine the current stage based on island's orientation
      const rotation = islandRef.current.rotation.y;
      const normalizedRotation =
        ((rotation % (2 * Math.PI)) + 2 * Math.PI) % (2 * Math.PI);

      // Set the current stage based on the island's orientation
      switch (true) {
        case normalizedRotation >= 5.45 && normalizedRotation <= 6:
        //connect with me
          setCurrentStage(4);
          break;
        case normalizedRotation >= 0.85 && normalizedRotation <= 1.4:
         //projects 
          setCurrentStage(3);
          break;
        case normalizedRotation >= 2.4 && normalizedRotation <= 3.1:
          //stage for my experience
          setCurrentStage(2);
          break;
        case normalizedRotation >= 4.25 && normalizedRotation <= 4.8:
          //stage for my intro
          setCurrentStage(1);
          break;
        default:
          setCurrentStage(null);
      }
    }
  });

  return ( 
    <a.group ref={islandRef} {...props}>
         <group rotation={[-Math.PI / 2, 0, 0]} scale={1.062}>
        <group rotation={[Math.PI / 2, 0, 0]} scale={0.01}>
          <group rotation={[-Math.PI / 2, 0, 0]} scale={100}>
            <mesh
              castShadow
              receiveShadow
              geometry={nodes.liberty_island_liberty_island_0.geometry}
              material={materials.liberty_island}
            />
            <mesh
              castShadow
              receiveShadow
              geometry={nodes.liberty_island_liberty_island_0_1.geometry}
              material={materials.liberty_island}
            />
            <mesh
              castShadow
              receiveShadow
              geometry={nodes.liberty_island_liberty_island_0_2.geometry}
              material={materials.liberty_island}
            />
            <mesh
              castShadow
              receiveShadow
              geometry={nodes.liberty_island_liberty_island_0_3.geometry}
              material={materials.liberty_island}
            />
            <mesh
              castShadow
              receiveShadow
              geometry={nodes.liberty_island_liberty_island_0_4.geometry}
              material={materials.liberty_island}
            />
          </group>
        </group>
      </group>
   
           {/* Ground plane */}
     {/* 
        //    <mesh rotation={[-Math.PI / 2, 0, 0]} position={[0, -10, 0]} receiveShadow>
        //    <planeBufferGeometry args={[1000, 1000]} />
        //    <meshStandardMaterial color={'green'} />
        //  </mesh>
      */}
    {/* <mesh
      geometry={nodes.polySurface944_tree_body_0.geometry}
      material={materials.PaletteMaterial001}
    />
    <mesh
      geometry={nodes.polySurface945_tree1_0.geometry}
      material={materials.PaletteMaterial001}
    />
    <mesh
      geometry={nodes.polySurface946_tree2_0.geometry}
      material={materials.PaletteMaterial001}
    />
    <mesh
      geometry={nodes.polySurface947_tree1_0.geometry}
      material={materials.PaletteMaterial001}
    />
    <mesh
      geometry={nodes.polySurface948_tree_body_0.geometry}
      material={materials.PaletteMaterial001}
    />
    <mesh
      geometry={nodes.polySurface949_tree_body_0.geometry}
      material={materials.PaletteMaterial001}
    />
    <mesh
      geometry={nodes.pCube11_rocks1_0.geometry}
      material={materials.PaletteMaterial001}
    /> */}
    </a.group>

  );
}


export default Island;